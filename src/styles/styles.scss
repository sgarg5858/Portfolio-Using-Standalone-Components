
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;

// SCSS structure includes having a directory file (i.e. _base-dir.scss) 
// in each folder that includes all of the individual stylesheets within that folder. 
// Those directory files, then roll up into the ‘main’ styles.scss folder which helps keep
//  things clean and organized, and easy to read. 
//  I like to set up my directory files to look something like this:

@use './0-base/base_dir' as base;
// @import './1-pages/pages_dir';
// @import './2-modules/modules-dir';
@use './3-helpers/helpers-dir' as helpers;
// @import './4-vendor/vendor-dir';
// @import'./5-print/print-dir.scss';

// Remember that the order of imports matters! 
// If you’re using constants / variables that your other stylesheets reference,
//  you’ll need to make sure that directory import is at the top being imported 
//  before the files that are using those variables.

// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$portfolio-using-standalone-components-primary: mat.define-palette(mat.$indigo-palette);
$portfolio-using-standalone-components-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$portfolio-using-standalone-components-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$portfolio-light-theme: mat.define-light-theme((
  color: (
    primary: $portfolio-using-standalone-components-primary,
    accent: $portfolio-using-standalone-components-accent,
    warn: $portfolio-using-standalone-components-warn,
  )
));

$portfolio-dark-theme: mat.define-dark-theme((
  color: (
    primary: $portfolio-using-standalone-components-primary,
    accent: $portfolio-using-standalone-components-accent,
    warn: $portfolio-using-standalone-components-warn,
  )
));



// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($portfolio-light-theme);


.darkmode{
  @include mat.all-component-themes($portfolio-dark-theme);
}

/* You can add global styles to this file, and also import other style files */


//CHeck how can't we assign scss variables to css variables!
:root{
  --primary-color: rgb(0, 137, 123);
  --focus-color: rgba(0, 137, 123, 0.3);
  --icon-color:rgba(0, 137, 123, 0.6);
  --mode-color: rgb(76, 117, 242);
  // --primary-color: rgb(76, 117, 242);
  // --focus-color: rgb(76, 117, 242,0.3);
  // --icon-color:rgb(76, 117, 242,0.6);
  --text-color:white;

}
:root .darkmode{

  --primary-color: rgb(34, 252, 208);
  --focus-color: rgba(34, 252, 208,0.3);
  --icon-color:  rgba(34, 252, 208,0.6);
  --mode-color:goldenrod;
  // --primary-color: rgb(250, 235, 215);
  // --focus-color: rgba(250, 235, 215,0.3);
  // --icon-color: rgba(250, 235, 215,0.6);
  --text-color:black;
}